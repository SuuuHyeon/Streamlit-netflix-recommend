# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2hYV4mxztSe5Rrpwbw8ow7yq1H8AORU
"""

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

@st.cache_data
def load_data():
    df = pd.read_csv("netflix_titles.csv")
    df = df[df['type'] == 'Movie'].dropna(subset=['title', 'description'])
    df = df.reset_index(drop=True)
    return df

@st.cache_data
def compute_similarity(df):
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(df['description'])
    similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)
    return similarity_matrix

def recommend(title, df, similarity_matrix, n=5):
    indices = pd.Series(df.index, index=df['title']).drop_duplicates()
    idx = indices.get(title)
    if idx is None:
        return []
    sim_scores = list(enumerate(similarity_matrix[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:n+1]
    recommended_indices = [i[0] for i in sim_scores]
    return df.iloc[recommended_indices]

# ---------------------- Streamlit UI ----------------------

st.title("🎬 넷플릭스 영화 추천기")
st.write("선택한 영화와 설명이 비슷한 영화를 추천해드려요!")

df = load_data()
similarity_matrix = compute_similarity(df)

selected_movie = st.selectbox("좋아하는 영화를 선택하세요:", df['title'].sort_values())

if selected_movie:
    st.subheader("🔍 추천 결과")
    results = recommend(selected_movie, df, similarity_matrix)
    if len(results) == 0:
        st.write("추천 결과가 없습니다.")
    else:
        for _, row in results.iterrows():
            st.write(f"**{row['title']}**")
            st.caption(f"장르: {row['listed_in']}")
            st.write(f"{row['description']}")
            st.markdown("---")